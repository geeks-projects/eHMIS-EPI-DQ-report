---
title: "EPI eHMIS data quality"
subtitle: "Dec 2023"
format: 
  dashboard:
    orientation: rows
    nav-buttons: 
     - github
server: shiny
  
---

```{r}
library(tidyverse)
library(dplyr)
library(scales)
library(sf)
library(ggspatial)
library(shiny)
library(reactable)
library(vroom)
```

# National

```{r}

data <- read.csv("./data/dhis2-data3.csv")

data_clean  <- data |> 
mutate( missing_reports = Expected.reports - Actual.reports, 
         missing_reports = if_else(missing_reports == 0, FALSE, TRUE),
         neg_dropout_rate_dpt1_3 = if_else(dropout.rate >= 0, FALSE, TRUE),
         discrepancy_dpt3_pcv3 = DPT3 - PCV.3, 
         discrepancy_dpt3_pcv3 = if_else(discrepancy_dpt3_pcv3 == 0, FALSE, TRUE),
         neg_wastage_rates_dpt = if_else(wastage.rate >= 0, FALSE, TRUE),
         .keep = "unused") |> 
  filter( !(is.na(missing_reports)& is.na(neg_dropout_rate_dpt1_3) & 
              is.na(discrepancy_dpt3_pcv3) & is.na(neg_wastage_rates_dpt))) |> 
    filter(!((missing_reports == TRUE ) & (!is.na(neg_dropout_rate_dpt1_3) | !is.na(discrepancy_dpt3_pcv3) | !is.na(neg_wastage_rates_dpt)))) |>
  mutate(District = str_remove_all(District, " District"),
         HF = str_replace(HF, "Health Centre", "HC"))

## 
final_df <- data_clean  |>  
  rowwise() |> 
  mutate(score = sum(missing_reports, neg_dropout_rate_dpt1_3, 
                            discrepancy_dpt3_pcv3, neg_wastage_rates_dpt, na.rm = T)) |> 
  ungroup()

```

```{r}
percentage <- function(indicator){
  round((sum(indicator, na.rm = T)/n())*100, digits= 1)
}


district_data <- final_df |> 
  group_by(District) |> 
  summarise(across(missing_reports:neg_wastage_rates_dpt, percentage)) |> 
  arrange(across(missing_reports:neg_wastage_rates_dpt, desc))

```

```{r}
national_summary <- district_data |> 
  mutate(missing_reports = if_else(missing_reports >= 20, TRUE, FALSE),
         neg_dropout_rate_dpt1_3 = if_else(neg_dropout_rate_dpt1_3 >= 20, TRUE, FALSE),
         discrepancy_dpt3_pcv3 = if_else(discrepancy_dpt3_pcv3 >= 20, TRUE, FALSE),
         neg_wastage_rates_dpt = if_else(neg_wastage_rates_dpt >= 20, TRUE, FALSE),
         .keep = "unused") |> 
  summarise(across(missing_reports:neg_wastage_rates_dpt,\(x) sum(x, na.rm = T)))
  
```

```{r}
threshold <- function(x){
  
  case_when(x <= 10 ~ "0 - 10", 
             x <= 20 ~ "10 - 20", 
             x <= 100 ~ "20 - 100"
             ) |> 
    factor(levels = c("0 - 10", "10 - 20","20 - 100"))
}

ug_geodata <- sf::read_sf("./shapefiles/local/") |> 
  st_as_sf()

plot_data <- ug_geodata |> 
  mutate(District = str_to_title(District), 
         District = str_replace(District, "Madi Okollo", "Madi-Okollo"), 
         District = str_replace(District, "Kassnda", "Kassanda"), 
         District = str_replace(District, "Ssembabule", "Sembabule"), 
         District = str_replace(District, "Namutunmba", "Namutumba")
      
         ) |>
  left_join(district_data, by = c("District" = "District")) |> 
  mutate(District = as.factor(District ), 
         across(missing_reports:neg_wastage_rates_dpt, threshold ))
```

```{r}
# Create custom labels - e.g. (0k-10k]
labs <- c(0,10, 20, 100)

cols <- c("0 - 10" =  "#1a9641", "10 - 20" = "#fdae61",
          "20 - 100"= "#d7191c")

labs_plot <- paste0(labs[1:5],"-", labs[2:6])

plot_ug_map <- function(data, fill, title ){
  
 ggplot(data) +
  geom_sf(data = data, aes(fill = {{fill}}, group = District),
          color = "white",
          linetype = 1) +
  geom_sf_text(data = data,aes(label = case_when({{fill}} == "20 - 100"~ District, NULL)),size = 2) +
    # Labs
    labs(title = title,
         fill = "%") +
    scale_fill_manual(values = cols
   #                    label = labs_plot,
  #                       guide = NULL
  #                       guide = guide_legend(direction = "horizontal",
  #                                         nrow = 1,
  #                                         label.position = "bottom")
  )+

  theme_void()+
    theme(legend.position = "none")
# theme(plot.caption = element_text(size = 7, face = "italic"),
#        legend.position = "bottom")
}
```

```{r}
bar_plot <- function(data, indicator){
  
  data |> 
  as_tibble() |>  
  count({{indicator}}, .drop = FALSE) |> 
  ggplot(aes(x = {{indicator}}, y = n, fill = {{indicator}}))+
  geom_col() +
 geom_label(aes(label = n),size = 2) +
  scale_fill_manual(values = cols, guide = NULL)+
    # Labs
    labs(title = NULL,
         y = "Number of districts",
         x = glue::glue("% of HFs in a district"),
         fill = "%") +
  theme_classic()
}
```



## Row 1

### Missing reports {.tabset}

```{r}
#| title: Missing reports
plot_ug_map(data = plot_data,fill = missing_reports, title = NULL )
```

```{r}
#| title: Summary
bar_plot(data = plot_data, indicator = missing_reports)  
```


### Negative Dropout rate {.tabset}

```{r}
#| title: Negative Dropout rate
#|padding: 0px   
plot_ug_map(data = plot_data,fill = neg_dropout_rate_dpt1_3,  title = NULL)
```


```{r}
#| title: Summary
bar_plot(data = plot_data, indicator = neg_dropout_rate_dpt1_3)
```

## Row 2

### Discrepancy between DPT3 and PCV3 {.tabset}

```{r}
#| title: Discrepancy between DPT3 and PCV3
#| #| padding: 0px   
plot_ug_map(data = plot_data,fill = discrepancy_dpt3_pcv3, title = NULL)
```


```{r}
#| title: Summary

bar_plot(data = plot_data, indicator = discrepancy_dpt3_pcv3)
```

### Negative wastage rate for DPT {.tabset}

```{r}
#| title: Negative wastage rate for DPT
#| #| padding: 0px   
plot_ug_map(data = plot_data,fill = neg_wastage_rates_dpt, title = NULL )
```


```{r}
#| title: Summary

bar_plot(data = plot_data, indicator = neg_wastage_rates_dpt)
```


# District

## {.sidebar}
    
```{r}

#| context: setup
data2 <- vroom("data/dhis2-data3.csv")

districts_df <- data2 |>  
  mutate(District = str_remove_all(District, " District"),
         HF = str_replace(HF, "Health Centre", "HC"))


districts <-  unique(sort(districts_df$District))

selectInput("district",
            "Select District:", 
            choices = districts,
            selected = "Abim District"
  )

br()

```

## Row

```{r}
reactable::reactableOutput("table")
```


```{r}
#| context: server
#| 

output$table <- reactable::renderReactable({
 
   data2 <- vroom::vroom("data/dhis2-data3.csv")
    
    data_clean  <- data2 |> 
         dplyr::mutate(District = stringr::str_remove_all(District, " District"),
         HF = stringr::str_replace(HF, "Health Centre", "HC")) |> 
      dplyr::filter(District == input$district) |> 
    #  dplyr::rowwise() |> 
      dplyr::mutate(missing_reports = `Expected reports` - `Actual reports`, 
             missing_reports = dplyr::if_else(missing_reports == 0, FALSE, TRUE),
             neg_dropout_rate_dpt1_3 = dplyr::if_else(`dropout rate` >= 0, FALSE, TRUE),
             discrepancy_dpt3_pcv3 = DPT3 - `PCV 3`, 
             discrepancy_dpt3_pcv3 = dplyr::if_else(discrepancy_dpt3_pcv3 == 0, FALSE, TRUE),
             neg_wastage_rates_dpt = dplyr::if_else(`wastage rate` >= 0, FALSE, TRUE),
             .keep = "unused") |> 
        dplyr::filter(!(is.na(missing_reports)& is.na(neg_dropout_rate_dpt1_3) &
              is.na(discrepancy_dpt3_pcv3) & is.na(neg_wastage_rates_dpt))) |>
    dplyr::filter(!((missing_reports == TRUE ) & (!is.na(neg_dropout_rate_dpt1_3) |
             !is.na(discrepancy_dpt3_pcv3) | !is.na(neg_wastage_rates_dpt))))

    
    ## getting NAs 
    
    data_clean [apply(is.na(data_clean), 1, any),]
    
    ## 
    final_df <-data_clean  |>  
        dplyr::rowwise() |> 
  dplyr::mutate(score = sum(missing_reports, neg_dropout_rate_dpt1_3, 
                            discrepancy_dpt3_pcv3, neg_wastage_rates_dpt, na.rm = T)) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(priorty = dplyr::case_when(
             score == 3 ~ "High", 
             score == 2 ~ "High", 
             score == 1 ~ "Mid", 
             score == 0 ~ "Low", 
             )) |> 
   dplyr::mutate(priorty = dplyr::case_when(
             missing_reports == TRUE ~ "High",
             missing_reports == FALSE ~ priorty)) |> 
  dplyr::arrange(priorty)
    
    
    reactable::reactable(final_df,  bordered = TRUE, highlight = TRUE,
              paginationType = "jump", defaultPageSize = 30,
              
              defaultColDef = reactable::colDef(
                cell = function(value) format(value, nsmall = 1),
                align = "center",
                minWidth = 70,
                headerStyle = list(background = "#f9f9f9")
              ),
              columns = list(
                HF = reactable::colDef(name = "Health Facility"),
                missing_reports = reactable::colDef(name = "Missing reports"),
                neg_dropout_rate_dpt1_3 = reactable::colDef(name = "Negative dropout rate DPT 1-3"),
                discrepancy_dpt3_pcv3 = reactable::colDef(name = "Discrepancy DPT3 - PCV3"),
                neg_wastage_rates_dpt = reactable::colDef(name = "Negative wastage rate DPT"),
                score = reactable::colDef(name = "Score"),
                priorty = reactable::colDef(name = "Priorty")
                # Species = reactable::colDef(align = "center")
              ),
              
              rowStyle = function(index) {
                if (final_df[index, "priorty"]  == "High") {
                  list(background = "#cf3045")
                }else if(final_df[index, "priorty"]  == "Mid") {
                  list(background = "#e6ae22")
                }else{
                  list(background = "#11ad5d")
                }
              }
              
    )
  })

```
